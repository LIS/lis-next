echo "Building Modules"
if [ "$KERNEL_VERSION" == "" ]
then
	KERNEL_VERSION=$(uname -r)
fi

rhel_major=$(grep -Eoh [0-9]+\.[0-9]+ /etc/{issue,*release} | head -1 | awk -F'.' '{ print $1 }')
rhel_minor=$(grep -Eoh [0-9]+\.[0-9]+ /etc/{issue,*release} | head -1 | awk -F'.' '{ print $2 }')
rhel_release_code=$((rhel_major << 8 | rhel_minor))
if [ $rhel_release_code -ge 1795 ] && [ $rhel_release_code -lt 1798 ]; then
	echo "Building & installing MLX OFED ..."
	rm -rf mlnx-ofa_kernel-4.5
	tar zxf mlnx-ofa_kernel-4.5.tgz
	cd mlnx-ofa_kernel-4.5
	./configure --with-mlx5-core-and-en-mod --with-mlx4_en-mod -j$(nproc)
	make -j$(nproc)
	mkdir -p /lib/modules/$KERNEL_VERSION/extra/lis-mlx
	find . -name *.ko -exec cp {} /lib/modules/$KERNEL_VERSION/extra/lis-mlx \;
	cd ..
	echo "Installing modprobe blacklist conf"
	cp -f ./hyperv_mod_blacklist.conf /etc/modprobe.d/
fi

echo "Cleaning up from any previous builds"
make -C /lib/modules/$KERNEL_VERSION/build M=`pwd` clean
[ $? -eq 0 ] || exit 1

echo "Creating LIS modules"
make -C /lib/modules/$KERNEL_VERSION/build M=`pwd` modules -j$(nproc)
[ $? -eq 0 ] || exit 1

echo "Installing Modules"
cp -f ./*.ko /lib/modules/$KERNEL_VERSION/extra/
[ $? -eq 0 ] || exit 1

echo "Generating Module dependencies"
depmod
[ $? -eq 0 ] || exit 1

echo "Installing Modprobe Rules"
cp -f ./hyperv_pvdrivers.conf /etc/modprobe.d/
[ $? -eq 0 ] || exit 1

echo "Copying scripts for IP injection"
\cp -f ./tools/hv_get_dns_info.sh /usr/sbin/hv_get_dns_info
[ $? -eq 0 ] || exit 1

\cp -f ./tools/hv_get_dhcp_info.sh /usr/sbin/hv_get_dhcp_info
[ $? -eq 0 ] || exit 1

\cp -f ./tools/hv_set_ifconfig.sh /usr/sbin/hv_set_ifconfig
[ $? -eq 0 ] || exit 1

echo "Copying lsvmbus tool"
\cp -f ./tools/lsvmbus /usr/sbin/
[ $? -eq 0 ] || exit 1
chmod +x /usr/sbin/lsvmbus

echo "Generating initramfs"
dracut --force  "initramfs-$KERNEL_VERSION.img" $KERNEL_VERSION
[ $? -eq 0 ] || exit 1

echo "Saving old initramfs"
if [ ! -e "/boot/initramfs-$KERNEL_VERSION.img-old" ]
then
	cp -f "/boot/initramfs-$KERNEL_VERSION.img" "/boot/initramfs-$KERNEL_VERSION.img-old"
	[ $? -eq 0 ] || exit 1
fi

echo "Installing new initramfs"
cp -f "initramfs-$KERNEL_VERSION.img" "/boot/initramfs-$KERNEL_VERSION.img"
[ $? -eq 0 ] || exit 1

# Remove the local copy of the initramfs image file
rm -f "./initramfs-$KERNEL_VERSION.img"

echo "Completed"
exit 0
